// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π (–∞–Ω–∞–ª–æ–≥ events.js –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏)
import React from 'react';
import { usePresentationStore } from '../store/usePresentationStore';

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–µ—Å—Ç–∞–º–∏ –∫–∞—Å–∞–Ω–∏—è
let touchStartX = 0;
let touchStartY = 0;
let touchEndX = 0;
let touchEndY = 0;

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–µ—Å—Ç–æ–≤ –∫–∞—Å–∞–Ω–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
export const useTouchEvents = (containerRef: React.RefObject<HTMLElement | null>) => {
  const { nextSlide, prevSlide, currentSlide, totalSlides } = usePresentationStore();

  const handleTouchStart = (e: React.TouchEvent) => {
    const touch = e.touches[0];
    touchStartX = touch.clientX;
    touchStartY = touch.clientY;
  };

  const handleTouchMove = (e: React.TouchEvent) => {
    if (!touchStartX) return;

    const touch = e.touches[0];
    touchEndX = touch.clientX;
    touchEndY = touch.clientY;

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–∫—Ä–æ–ª–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º —Å–≤–∞–π–ø–µ
    const diffX = Math.abs(touchEndX - touchStartX);
    const diffY = Math.abs(touchEndY - touchStartY);

    if (diffX > diffY && diffX > 10) {
      e.preventDefault();
    }
  };

  const handleTouchEnd = () => {
    if (!touchStartX || !touchEndX) return;

    const diffX = touchStartX - touchEndX;
    const diffY = Math.abs(touchStartY - touchEndY);
    const swipeThreshold = 50;
    const verticalThreshold = 100;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø, –∞ –Ω–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π
    if (Math.abs(diffX) > swipeThreshold && diffY < verticalThreshold) {
      if (diffX > 0) {
        // –°–≤–∞–π–ø –≤–ª–µ–≤–æ - —Å–ª–µ–¥—É—é—â–∏–π —Å–ª–∞–π–¥
        nextSlide();
      } else {
        // –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ - –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–∞–π–¥
        prevSlide();
      }
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    touchStartX = 0;
    touchEndX = 0;
  };

  return {
    onTouchStart: handleTouchStart,
    onTouchMove: handleTouchMove,
    onTouchEnd: handleTouchEnd
  };
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –º—ã—à—å—é –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É —Å–ª–∞–π–¥–æ–≤
export const useMouseNavigation = (containerRef: React.RefObject<HTMLElement | null>) => {
  const { nextSlide, prevSlide, currentSlide, totalSlides } = usePresentationStore();

  const handleContainerClick = (e: React.MouseEvent) => {
    if (!containerRef.current) return;

    const containerWidth = containerRef.current.offsetWidth;
    const clickX = e.clientX - containerRef.current.getBoundingClientRect().left;

    // –ö–ª–∏–∫ –≤ –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏ - —Å–ª–µ–¥—É—é—â–∏–π —Å–ª–∞–π–¥
    if (clickX > containerWidth * 0.7 && currentSlide < totalSlides - 1) {
      nextSlide();
    }
    // –ö–ª–∏–∫ –≤ –ª–µ–≤–æ–π —á–∞—Å—Ç–∏ - –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–∞–π–¥
    else if (clickX < containerWidth * 0.3 && currentSlide > 0) {
      prevSlide();
    }
  };

  return {
    onClick: handleContainerClick
  };
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–µ—Å–∏–∫–∞ –º—ã—à–∏
export const useWheelNavigation = () => {
  const { nextSlide, prevSlide } = usePresentationStore();

  const handleWheel = (e: React.WheelEvent) => {
    e.preventDefault();
    const delta = e.deltaY;

    if (delta > 0) {
      // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑ - —Å–ª–µ–¥—É—é—â–∏–π —Å–ª–∞–π–¥
      nextSlide();
    } else if (delta < 0) {
      // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö - –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–∞–π–¥
      prevSlide();
    }
  };

  return {
    onWheel: handleWheel
  };
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
export const useKeyboardNavigation = () => {
  const { nextSlide, prevSlide, setCurrentSlide, totalSlides } = usePresentationStore();

  const handleKeyDown = (e: KeyboardEvent) => {
    console.log('‚å®Ô∏è  –ù–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞:', e.key, '–ö–æ–¥:', e.code);

    switch(e.key) {
      case 'ArrowRight':
      case ' ':
      case 'PageDown':
        console.log('‚û°Ô∏è  –ü–µ—Ä–µ—Ö–æ–¥ –≤–ø–µ—Ä–µ–¥');
        nextSlide();
        e.preventDefault();
        break;

      case 'ArrowLeft':
      case 'PageUp':
        console.log('‚¨ÖÔ∏è  –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞–∑–∞–¥');
        prevSlide();
        e.preventDefault();
        break;

      case 'Home':
        console.log('üè† Home - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–µ—Ä–≤–æ–º—É —Å–ª–∞–π–¥—É');
        setCurrentSlide(0);
        e.preventDefault();
        break;

      case 'End':
        console.log('üîö End - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–ª–∞–π–¥—É');
        setCurrentSlide(totalSlides - 1);
        e.preventDefault();
        break;

      case '1':
      case '2':
      case '3':
      case '4':
        const num = parseInt(e.key);
        console.log('üî¢ –¶–∏—Ñ—Ä–∞', num, '- –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–∞–π–¥—É', num);
        if (num >= 1 && num <= totalSlides) {
          setCurrentSlide(num - 1);
          e.preventDefault();
        } else {
          console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–ª–∞–π–¥–∞:', num);
        }
        break;

      default:
        console.log('‚ÑπÔ∏è  –ö–ª–∞–≤–∏—à–∞ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è:', e.key);
    }
  };

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  const setupKeyboardHandler = () => {
    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  };

  return {
    setupKeyboardHandler
  };
};

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
export const usePresentationExpand = () => {
  const [isExpanded, setIsExpanded] = React.useState(false);

  const toggleExpand = () => {
    setIsExpanded(!isExpanded);
    console.log(isExpanded ? 'üìê –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –∫ –æ–±—ã—á–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É' : 'üñ•Ô∏è –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∞ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω');
  };

  return {
    isExpanded,
    toggleExpand,
    containerClass: isExpanded ? 'expanded' : '',
    buttonClass: isExpanded ? 'expanded' : ''
  };
};

// –ö–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π —Ö—É–∫ –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
export const useEventHandlers = (containerRef: React.RefObject<HTMLElement | null>) => {
  const touchEvents = useTouchEvents(containerRef);
  const mouseEvents = useMouseNavigation(containerRef);
  const wheelEvents = useWheelNavigation();
  const keyboardEvents = useKeyboardNavigation();
  const expandEvents = usePresentationExpand();

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  React.useEffect(() => {
    const cleanup = keyboardEvents.setupKeyboardHandler();
    return cleanup;
  }, []);

  return {
    // –°–æ–±—ã—Ç–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    containerEvents: {
      onTouchStart: touchEvents.onTouchStart,
      onTouchMove: touchEvents.onTouchMove,
      onTouchEnd: touchEvents.onTouchEnd,
      onClick: mouseEvents.onClick,
      onWheel: wheelEvents.onWheel
    },
    // –°–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    expandEvents
  };
};