// Node.js —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–ª–∞–π–¥–æ–≤
// –ó–∞–ø—É—Å–∫: node test-content-node.js

console.log('üé® –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–ª–∞–π–¥–æ–≤...');

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CSS –∫–ª–∞—Å—Å–æ–≤ –≤ —Ñ–∞–π–ª–∞—Ö —Å—Ç–∏–ª–µ–π
function testCssClasses() {
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS –∫–ª–∞—Å—Å–æ–≤ —Å–ª–∞–π–¥–æ–≤:');
    
    const slideStyles = [
        'src/styles/slides/ChallengeSlide.module.css',
        'src/styles/slides/DepthModernSlide.module.css',
        'src/styles/slides/MetricsModernSlide.module.css'
    ];
    
    let allClassesFound = true;
    
    slideStyles.forEach(styleFile => {
        const filePath = path.join(__dirname, styleFile);
        if (fs.existsSync(filePath)) {
            const content = fs.readFileSync(filePath, 'utf8');
            const className = path.basename(styleFile, '.module.css');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
            const hasMainClass = content.includes(`.${className.toLowerCase()}`) ||
                               content.includes(`.${className}`) ||
                               content.includes(`.${className.charAt(0).toLowerCase() + className.slice(1)}`);
            const hasActiveClass = content.includes('.activeSlide') ||
                                 content.includes('.active');
            
            console.log(`   ${className}:`);
            console.log(`     –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å: ${hasMainClass ? '‚úÖ' : '‚ùå'}`);
            console.log(`     –ê–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å: ${hasActiveClass ? '‚úÖ' : '‚ùå'}`);
            
            if (!hasMainClass || !hasActiveClass) {
                allClassesFound = false;
            }
        } else {
            console.log(`   ‚ùå –§–∞–π–ª ${styleFile} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            allClassesFound = false;
        }
    });
    
    return allClassesFound;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–ª–∞–π–¥–æ–≤
function testSlideComponents() {
    console.log('\nüß© –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–ª–∞–π–¥–æ–≤:');
    
    const slideComponents = [
        'src/animations/AnimatedSlide.tsx',
        'src/components/Navigation.tsx',
        'src/components/Slide.tsx'
    ];
    
    let allComponentsFound = true;
    
    slideComponents.forEach(componentFile => {
        const filePath = path.join(__dirname, componentFile);
        if (fs.existsSync(filePath)) {
            const content = fs.readFileSync(filePath, 'utf8');
            const componentName = path.basename(componentFile, '.tsx');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            const hasExport = content.includes(`export function ${componentName}`) ||
                             content.includes(`export const ${componentName}`) ||
                             content.includes(`export class ${componentName}`);
            
            console.log(`   ${componentName}:`);
            console.log(`     –≠–∫—Å–ø–æ—Ä—Ç: ${hasExport ? '‚úÖ' : '‚ùå'}`);
            
            if (!hasExport) {
                allComponentsFound = false;
            }
        } else {
            console.log(`   ‚ùå –§–∞–π–ª ${componentFile} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            allComponentsFound = false;
        }
    });
    
    return allComponentsFound;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ App.tsx
function testAppStructure() {
    console.log('\nüèóÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã App.tsx:');
    
    const appFile = path.join(__dirname, 'src/App.tsx');
    if (fs.existsSync(appFile)) {
        const content = fs.readFileSync(appFile, 'utf8');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–∞–π–¥–æ–≤
        const hasSlidesArray = content.includes('const slides:');
        const hasAnimatedSlideImport = content.includes('AnimatedSlide');
        const hasAnimatedSlideUsage = content.includes('<AnimatedSlide');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤
        const slideCount = (content.match(/id: '/g) || []).length;
        
        console.log('   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ App.tsx:');
        console.log(`     –ú–∞—Å—Å–∏–≤ —Å–ª–∞–π–¥–æ–≤: ${hasSlidesArray ? '‚úÖ' : '‚ùå'}`);
        console.log(`     –ò–º–ø–æ—Ä—Ç AnimatedSlide: ${hasAnimatedSlideImport ? '‚úÖ' : '‚ùå'}`);
        console.log(`     –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ AnimatedSlide: ${hasAnimatedSlideUsage ? '‚úÖ' : '‚ùå'}`);
        console.log(`     –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤: ${slideCount} ${slideCount === 3 ? '‚úÖ' : '‚ùå'}`);
        
        return hasSlidesArray && hasAnimatedSlideImport && hasAnimatedSlideUsage && slideCount === 3;
    } else {
        console.log('   ‚ùå –§–∞–π–ª App.tsx –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
function testGlobalStyles() {
    console.log('\nüé® –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å—Ç–∏–ª–µ–π:');
    
    const globalStyles = [
        'src/styles/global/variables.css',
        'src/styles/global/globals.css',
        'src/styles/global/animations.css'
    ];
    
    let allStylesFound = true;
    
    globalStyles.forEach(styleFile => {
        const filePath = path.join(__dirname, styleFile);
        if (fs.existsSync(filePath)) {
            console.log(`   ‚úÖ ${styleFile}`);
        } else {
            console.log(`   ‚ùå ${styleFile} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            allStylesFound = false;
        }
    });
    
    return allStylesFound;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function runStructureTests() {
    console.log('='.repeat(60));
    console.log('üèóÔ∏è  –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –°–õ–ê–ô–î–û–í');
    console.log('='.repeat(60));
    
    const cssValid = testCssClasses();
    const componentsValid = testSlideComponents();
    const appValid = testAppStructure();
    const stylesValid = testGlobalStyles();
    
    console.log('\n' + '='.repeat(60));
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.log('='.repeat(60));
    
    console.log(`   CSS –∫–ª–∞—Å—Å—ã: ${cssValid ? '‚úÖ' : '‚ùå'}`);
    console.log(`   –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: ${componentsValid ? '‚úÖ' : '‚ùå'}`);
    console.log(`   App —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: ${appValid ? '‚úÖ' : '‚ùå'}`);
    console.log(`   –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏: ${stylesValid ? '‚úÖ' : '‚ùå'}`);
    
    const overallSuccess = cssValid && componentsValid && appValid && stylesValid;
    
    if (overallSuccess) {
        console.log('\nüéâ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–ª–∞–π–¥–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!');
        console.log('‚úÖ –í—Å–µ CSS –∫–ª–∞—Å—Å—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
        console.log('‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è');
        console.log('‚úÖ App.tsx –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É');
        console.log('‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
    } else {
        console.log('\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —Å–ª–∞–π–¥–æ–≤');
        console.log('‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –∏–º–ø–æ—Ä—Ç–æ–≤');
    }
    
    return overallSuccess;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
try {
    const success = runStructureTests();
    process.exit(success ? 0 : 1);
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error.message);
    process.exit(1);
}