// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è responsive design
// –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000 –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª–∏

console.log('üì± –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è responsive design...');

function testResponsiveDesign() {
    console.log('='.repeat(60));
    console.log('üì± –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï RESPONSIVE DESIGN');
    console.log('='.repeat(60));
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ viewport meta —Ç–µ–≥–∞
    console.log('\nüß™ 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ viewport meta —Ç–µ–≥–∞:');
    const viewportMeta = document.querySelector('meta[name="viewport"]');
    const viewportContent = viewportMeta ? viewportMeta.getAttribute('content') : '';
    const hasViewport = viewportMeta && viewportContent.includes('width=device-width');
    
    console.log(`   Viewport meta: ${hasViewport ? '‚úÖ' : '‚ùå'}`);
    if (viewportMeta) {
        console.log(`   Content: "${viewportContent}"`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ CSS
    console.log('\nüß™ 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å–æ–≤:');
    const styleSheets = document.styleSheets;
    let mediaQueryCount = 0;
    const breakpoints = new Set();
    
    for (let i = 0; i < styleSheets.length; i++) {
        try {
            const rules = styleSheets[i].cssRules || styleSheets[i].rules;
            for (let j = 0; j < rules.length; j++) {
                const rule = rules[j];
                if (rule.constructor.name === 'CSSMediaRule') {
                    mediaQueryCount++;
                    const mediaText = rule.media.mediaText;
                    console.log(`   üìä ${mediaText}`);
                    
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º breakpoints
                    if (mediaText.includes('max-width')) {
                        const match = mediaText.match(/max-width:\s*(\d+)px/);
                        if (match) breakpoints.add(parseInt(match[1]));
                    }
                    if (mediaText.includes('min-width')) {
                        const match = mediaText.match(/min-width:\s*(\d+)px/);
                        if (match) breakpoints.add(parseInt(match[1]));
                    }
                }
            }
        } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ CORS
        }
    }
    
    console.log(`   –í—Å–µ–≥–æ –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å–æ–≤: ${mediaQueryCount}`);
    console.log(`   Breakpoints: ${Array.from(breakpoints).sort((a, b) => a - b).join('px, ')}px`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ responsive –∫–ª–∞—Å—Å–æ–≤
    console.log('\nüß™ 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ responsive –∫–ª–∞—Å—Å–æ–≤:');
    const responsiveClasses = [
        'container', 'wrapper', 'grid', 'flex', 
        'col-', 'row-', 'md-', 'lg-', 'xl-',
        'hidden', 'block', 'inline', 'flex'
    ];
    
    responsiveClasses.forEach(className => {
        const elements = document.querySelectorAll(`[class*="${className}"]`);
        if (elements.length > 0) {
            console.log(`   ${className}: ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
        }
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    console.log('\nüß™ 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:');
    const structuralElements = {
        'Grid containers': document.querySelectorAll('[class*="grid"]'),
        'Flex containers': document.querySelectorAll('[class*="flex"]'),
        'Content wrappers': document.querySelectorAll('[class*="content"]'),
        'Responsive images': document.querySelectorAll('img[srcset], img[sizes]'),
        'Picture elements': document.querySelectorAll('picture')
    };
    
    Object.entries(structuralElements).forEach(([name, elements]) => {
        console.log(`   ${name}: ${elements.length}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
    console.log('\nüß™ 5. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:');
    console.log(`   –®–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞: ${window.innerWidth}px`);
    console.log(`   –í—ã—Å–æ—Ç–∞ –æ–∫–Ω–∞: ${window.innerHeight}px`);
    console.log(`   Device pixel ratio: ${window.devicePixelRatio}`);
    console.log(`   –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: ${window.screen.orientation?.type || 'unknown'}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    console.log('\nüß™ 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:');
    const rootStyles = getComputedStyle(document.documentElement);
    const cssVariables = [
        '--breakpoint-mobile',
        '--breakpoint-tablet', 
        '--breakpoint-desktop',
        '--container-width',
        '--spacing-unit',
        '--grid-gap'
    ];
    
    cssVariables.forEach(varName => {
        const value = rootStyles.getPropertyValue(varName);
        if (value) {
            console.log(`   ${varName}: ${value}`);
        }
    });
    
    return true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
function testBreakpoints() {
    console.log('\nüß™ 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ breakpoints:');
    
    const breakpoints = [320, 480, 768, 1024, 1280, 1440, 1920];
    const currentWidth = window.innerWidth;
    
    console.log('   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ breakpoints –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    breakpoints.forEach(bp => {
        const status = currentWidth >= bp ? '‚â•' : '<';
        console.log(`     ${bp}px ${status} ${currentWidth}px`);
    });
    
    return true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ touch –ø–æ–¥–¥–µ—Ä–∂–∫–∏
function testTouchSupport() {
    console.log('\nüß™ 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ touch –ø–æ–¥–¥–µ—Ä–∂–∫–∏:');
    
    const hasTouch = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
    const pointerSupport = navigator.pointerEnabled || navigator.msPointerEnabled;
    
    console.log(`   Touch support: ${hasTouch ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Pointer events: ${pointerSupport ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Max touch points: ${navigator.maxTouchPoints || 0}`);
    
    return true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–±–∏–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
function testMobileFeatures() {
    console.log('\nüß™ 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:');
    
    const features = {
        'Viewport units': CSS.supports('width', '100vw'),
        'Flexbox gap': CSS.supports('gap', '1rem'),
        'Grid layout': CSS.supports('display', 'grid'),
        'CSS variables': CSS.supports('--test-var', 'red'),
        'Touch action': CSS.supports('touch-action', 'manipulation')
    };
    
    Object.entries(features).forEach(([feature, supported]) => {
        console.log(`   ${feature}: ${supported ? '‚úÖ' : '‚ùå'}`);
    });
    
    return true;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function runResponsiveTests() {
    console.log('='.repeat(60));
    console.log('üì± –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï RESPONSIVE DESIGN');
    console.log('='.repeat(60));
    
    const responsiveTest = testResponsiveDesign();
    const breakpointsTest = testBreakpoints();
    const touchTest = testTouchSupport();
    const mobileTest = testMobileFeatures();
    
    console.log('\n' + '='.repeat(60));
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.log('='.repeat(60));
    
    console.log(`   –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${responsiveTest ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Breakpoints: ${breakpointsTest ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Touch –ø–æ–¥–¥–µ—Ä–∂–∫–∞: ${touchTest ? '‚úÖ' : '‚ùå'}`);
    console.log(`   –ú–æ–±–∏–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: ${mobileTest ? '‚úÖ' : '‚ùå'}`);
    
    const overallSuccess = responsiveTest && breakpointsTest && touchTest && mobileTest;
    
    if (overallSuccess) {
        console.log('\nüéâ Responsive design –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!');
        console.log('‚úÖ –ú–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        console.log('‚úÖ Breakpoints –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã');
        console.log('‚úÖ –ú–æ–±–∏–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è');
        console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
    } else {
        console.log('\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å responsive design');
        console.log('‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å—ã –∏ –º–æ–±–∏–ª—å–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É');
    }
    
    return overallSuccess;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
setTimeout(() => {
    try {
        const success = runResponsiveTests();
        console.log('\nüí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
        console.log('   - –ò–∑–º–µ–Ω—è–π—Ç–µ —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞');
        console.log('   - –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö');
        console.log('   - –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤ DevTools Device Mode');
        console.log('   - –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ touch-–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ responsive design:', error.message);
    }
}, 1000);

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
window.testResponsive = {
    runAll: runResponsiveTests,
    testDesign: testResponsiveDesign,
    testBreakpoints: testBreakpoints,
    testTouch: testTouchSupport
};

console.log('üìã –§—É–Ω–∫—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è responsive design –¥–æ—Å—Ç—É–ø–Ω—ã –≤ window.testResponsive');